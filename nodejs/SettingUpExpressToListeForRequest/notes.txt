
 * how to instantiate express app , 
 * set a port number using  variables, 
 * how to read a number using variables , 
 * listeng for request on a particular port '
 * app. liste method is asynchronous
 * 

Installers

npm init
npm install express --save

 npm install mocha --save-dev

 npm install

 npm install --production 

 npm install --save body-parser

npm install -g nodemon //restart server


 
01) EXPRESS - ROUTING DEFINING URL ROUTES AND SENDING A RESPONSE
    - Defining url Routes
        The idea of routing is all about listening for a request on specific urls, doing something on the server and then sending a response 
    - Returning status codes
    - Responding with data
    - Sending HTML response

02) EXPRESS  - SERVING STATIC FILES FROM EXPRESS
    - Definig static folders
    - Build basic HTML page
    - Deliver CSS, images and Javascript

        app.use(express.static(path.join(__dirname,'public')));
        app.use('/public',express.static(path.join(__dirname,'public'))); specific route from folder

03) EXPRESS -EXPLORING MIDDLEWARE;
    - What is middleware?
    - Create a logging function
    - When and how to use middleware

    app.use(function(req, res, next){
       console.log(req.method, req.url);
    });

    app.use('/css',function(req, res, next){
        console.log(req.method, req.url);
        next();
    });
        
 04) EXPRESS - USING THE EXPRESS ROUTER
    - Separation of concerns
    - Instantiating the ROUTER
    - Applyring the router to a subset of routers
    - Testing routes using Postman

05) EXPRESS - USGING CONTROLLERS TO DEFINE FUNCTIONALITY
    - Organising code to create an Applyring
    - Defining & exporting controller functions
    - Map controllers to routes
    - Get and return data
    

06) EXPRESS - DEFINING DYNAMIC ROURTES WITH URL PARAMETERS
    - What are Url PARAMETERS
    - Defining url parameters in routes 
    - Using them in controllers

07) EXPRESS - WORKING WITH QUERYSTRINGS AND POISTED FORM DATA
    - Getting querystring data in controllers
    - Adding middleware for parsing forms
    - Getting form data in controllers

08) EXPRESS -  IMPROVING MEAN DEVELMENT WORKFLOW WITH NODEMON
    - What Nodemon is
    - Why it's good for you workflow 
    - How to install, run and configure


09) NOSQL - databases
    Types of NOSQL databases
    - Key-value store
    - Document sstore
    - Graph databases

10) MONGODB - the basics
    - A deeper look at MONGODB collections
    - JSON and BSON
    - Unique IDs in MongoDB documents

11) MONGODB - Getting Started with the Mongo Shell
    - Listing databases and collections
    - Creating databases, collections and documents
    - Retrieving documents.

        -- commands --
            $ mongoDB o mongo db
                | show all databases | 
                    > shows dbs
                | use database |
                    > use local
                | show all the  collections |
                    > show collections
                | Create a database > use a database that does not exist |
                    > use meantest
                    > show dbs
                    > show collections
                    > use meantest
                    > db.createCollection('tech') --name of the collections
                    > show dbs
                    > show collections 
                | Create a document |
                    >  db.tech.insert({
                         name:'MongoDB',
                         role:'Database'
                       })
                | Build  a query |
                    | Find All |
                        > db.tech.find() -- Find everything  __id unique identify  ObjectId 
                    | Find ALL Pretty |
                        > db.tech.find().pretty()
                    | insert an Array |
                        > db.tech.insert(
                            [
                                {
                                    name:"Express",
                                    role:'Web application server'
                                },
                                {
                                    name: 'Angular',
                                    role:'Front-end framework'
                                },
                                {
                                    name:'Node.js',
                                    role:'Platform'
                                    
                                }
                            ]
                        )

                        -- Message OK
                            BulkWriteResult({
                            "writeErrors" : [ ],
                            "writeConcernErrors" : [ ],
                            "nInserted" : 3,
                            "nUpserted" : 0,
                            "nMatched" : 0,
                            "nModified" : 0,
                            "nRemoved" : 0,
                            "upserted" : [ ]
                        })

                    | Find All Again |                
                        > db.tech.find().pretty()

12) MongoDB - Interacting with data from the command line (Mongo shell)
    - queryinhg the database to find documents
    - Modifying the data returned: e.g sorting
    - Updating documents
    - Deleting documents 

        | find documents |
            > db.tech.find({"_id" : ObjectId("5ee8659af58cb7af1a201d0a")})
            > db.tech.find({"name" : "Angular"}) 
        
        | ORDER |        
            > db.tech.find().sort({"name":1}) Descending
            > db.tech.find().sort({"name":-1})  ASC
        | Projections | 
            > db.tech.find({},{name:true})  only name and id
            > db.tech.find({},{name:true,"_id":false}) or db.tech.find({},{name:true,"_id":0}) -> onlye name without id